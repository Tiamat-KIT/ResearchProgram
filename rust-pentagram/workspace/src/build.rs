// see https://dev.to/javiasilis/how-to-pass-environment-variables-to-a-rust-wasm-application-like-yew-dioxus-and-leptos-as-a-typescript-developer-ond
use std::fs::File;
use std::io::Write;
use std::path::Path;
use dotenvy;

fn main() {
    println!("cargo:rerun-if-changed=.env");
    let dest_path = "./src/env.rs";
    let mut f = File::create(&dest_path).unwrap();

    /* match dotenvy::from_filename_iter(Path::new("../../.env")) {
        Ok(file) => println!("Loaded .env file"),
        Err(e) => println!("Failed to load .env file: {}", e),
    } */
    let env_iter = dotenvy::from_path_iter(Path::new("../../.env"))
        .expect("Failed to load .env file");

        // .expect("Failed to load .env file")
    f.write_all(b"// This file is automatically generated by build.rs\n\n")
        .unwrap();
    for result in env_iter {
        match result {
            Ok((key, value)) => {
                let line = format!(
                    "pub const {}: &'static str = \"{}\";\n",
                    key,
                    value.replace("\"", "\\\"")
                );
                f.write_all(line.as_bytes()).unwrap();
            }
            Err(e) => {
                println!("Failed to parse .env file: {}", e);
            }
        }
    }
}